[{"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\index.tsx":"1","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\App.tsx":"3","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\window.tsx":"4","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\navigation.tsx":"5","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\currentlyPlayingMobile.tsx":"6","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\remix\\stemRemix.tsx":"7","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\library\\library.tsx":"8","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\library\\remixComponent.tsx":"9"},{"size":615,"mtime":1653348951146,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1627836706458,"results":"12","hashOfConfig":"11"},{"size":1105,"mtime":1657039290419,"results":"13","hashOfConfig":"11"},{"size":935,"mtime":1658107587020,"results":"14","hashOfConfig":"11"},{"size":2007,"mtime":1656703912678,"results":"15","hashOfConfig":"11"},{"size":1543,"mtime":1658099580005,"results":"16","hashOfConfig":"11"},{"size":7688,"mtime":1658099284355,"results":"17","hashOfConfig":"11"},{"size":624,"mtime":1658099530588,"results":"18","hashOfConfig":"11"},{"size":1202,"mtime":1656262692392,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o33ntb",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\index.tsx",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\App.tsx",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\window.tsx",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\navigation.tsx",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\currentlyPlayingMobile.tsx",["40","41"],"import  { useState } from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\nimport '../styling/currentlyPlayingMobile.css';\r\n\r\n\r\nimport TestDrive from './test_drive.png';\r\n\r\nimport drive from './test_drive.mp3';\r\n\r\n\r\nconst CurrentlyPlayingMobile = () => {\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  const [volume, setVolume] = useState(50);\r\n\r\n\r\n  const handleSetPlaying = () => {\r\n    console.log('mobile set playing');\r\n    setPlaying(!playing)\r\n    var music = new Audio(drive);\r\n    music.play();\r\n  };\r\n\r\n  return(\r\n    <Box\r\n      id='currently-playing'\r\n    >\r\n      <Box\r\n        display='flex'\r\n        flexDirection='row'\r\n      >\r\n        <img\r\n            id='currently-playing-cover-art'\r\n            src={TestDrive}\r\n            alt=\"Cover art of currently playing track\"\r\n          />\r\n        <Box\r\n          display='flex'\r\n          flexDirection='column'\r\n          alignSelf='center'\r\n          pl={1}\r\n          textAlign='left'\r\n        >\r\n          <Typography id='title'>better off</Typography>\r\n          <Typography id='artist'>Ariana Grande</Typography>\r\n        </Box>\r\n      </Box>\r\n      {playing ? <PlayArrowIcon onClick = {() => handleSetPlaying()} style={{ 'alignSelf': 'center', color: '#1DB954'}}/> : <PauseIcon onClick = {() => handleSetPlaying()} style={{ 'alignSelf': 'center', color: '#1DB954'}}/>}\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default CurrentlyPlayingMobile;\r\n","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\remix\\stemRemix.tsx",["42","43","44"],"import  React, { useRef, useState, ChangeEvent, useEffect } from 'react';\r\nimport { \r\n  Box,\r\n  Typography,\r\n  Button\r\n} from '@material-ui/core';\r\n\r\nimport Slider from \"@mui/material/Slider\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDrum, faMicrophoneLines, faGuitar, faMusic } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport '../../styling/stemRemix.css';\r\n\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\nimport Ctrl from '../test_drive.png';\r\n\r\nimport vocals from './../vocals.wav';\r\nimport bass from './../bass.wav';\r\nimport other from './../other.wav';\r\nimport drums from './../drums.wav';\r\n\r\nconst StemRemix = () => {  \r\n    const [favorite, setFavorite] = useState(false);\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const audioContext = new AudioContext();\r\n\r\n    const otherAudio = new Audio(other);\r\n    const otherGainNode = new GainNode(audioContext, { gain: 0.5});\r\n    const otherVolume = document.getElementById(\"other-volume\")!;\r\n\r\n    const vocalAudio = new Audio(vocals);\r\n    const vocalGainNode = new GainNode(audioContext, { gain: 0.5});\r\n    const vocalVolume = document.getElementById(\"vocal-volume\")!;\r\n\r\n    const bassAudio = new Audio(bass);\r\n    const bassGainNode = new GainNode(audioContext, { gain: 0.5});\r\n    const bassVolume = document.getElementById(\"bass-volume\")!;\r\n\r\n    const drumsAudio = new Audio(drums);\r\n    const drumsGainNode = new GainNode(audioContext, { gain: 0.5});\r\n    const drumsVolume = document.getElementById(\"drums-volume\")!;\r\n\r\n    useEffect(() => {\r\n      console.log('use effect')\r\n      console.log(playing)\r\n      console.log('use effect')\r\n    }, [playing]);\r\n\r\n    setupEventListeners()\r\n    setupContext()\r\n\r\n    async function setupContext() {\r\n      const track = audioContext.createMediaElementSource(otherAudio);\r\n      track.connect(otherGainNode).connect(audioContext.destination)\r\n\r\n      const vocalTrack = audioContext.createMediaElementSource(vocalAudio);\r\n      vocalTrack.connect(vocalGainNode).connect(audioContext.destination);\r\n\r\n      const bassTrack = audioContext.createMediaElementSource(bassAudio);\r\n      bassTrack.connect(bassGainNode).connect(audioContext.destination);\r\n\r\n      const drumsTrack = audioContext.createMediaElementSource(drumsAudio);\r\n      drumsTrack.connect(drumsGainNode).connect(audioContext.destination);\r\n    }\r\n\r\n    const handleSetPlaying = () => {\r\n      console.log(playing)\r\n      setPlaying(!playing)\r\n\r\n      console.log(\"hello\")\r\n      console.log(playing)\r\n      if (playing) {\r\n        vocalAudio.play();\r\n        bassAudio.play();\r\n        drumsAudio.play();\r\n        otherAudio.play();\r\n      } else {\r\n        vocalAudio.pause();\r\n        bassAudio.pause();\r\n        drumsAudio.pause();\r\n        otherAudio.pause();\r\n      }\r\n    }\r\n\r\n    const handleSetFavorite = () => {\r\n      setFavorite(!favorite)\r\n    };\r\n\r\n    async function setupEventListeners(){\r\n      otherVolume?.addEventListener('input', event => {\r\n        const element = event.target as HTMLInputElement\r\n        console.log(parseFloat(element.value))\r\n        otherGainNode.gain.value = parseFloat(element.value)\r\n      })\r\n\r\n      vocalVolume?.addEventListener('input', event => {\r\n        const element = event.target as HTMLInputElement\r\n        console.log(parseFloat(element.value))\r\n        vocalGainNode.gain.value = parseFloat(element.value)\r\n      })\r\n\r\n      bassVolume?.addEventListener('input', event => {\r\n        const element = event.target as HTMLInputElement\r\n        console.log(parseFloat(element.value))\r\n        bassGainNode.gain.value = parseFloat(element.value)\r\n      })\r\n\r\n      drumsVolume?.addEventListener('input', event => {\r\n        const element = event.target as HTMLInputElement\r\n        console.log(parseFloat(element.value))\r\n        drumsGainNode.gain.value = parseFloat(element.value)\r\n      })\r\n    }\r\n\r\n  return(\r\n    <Box\r\n      id='remix-window'\r\n    >\r\n      <Typography id='stem-remix'>Stem Remix</Typography>\r\n      <Box\r\n        id='remix-and-sliders'\r\n      >\r\n        <Box\r\n      id='remix-playing'\r\n    >\r\n      <img\r\n        id='remix-playing-cover'\r\n        src={Ctrl}\r\n        alt='Cover art of current remix'\r\n      />\r\n      <Box\r\n        id='remix-information'\r\n      >\r\n        <Box\r\n          display='flex'\r\n          flexDirection='row'\r\n          justifyContent='space-between'\r\n        >\r\n          <Box>\r\n            <Typography id='remix-playing-title'>test drive</Typography>\r\n            <Typography id='remix-playing-artist'>Ariana Grande</Typography>\r\n          </Box>\r\n          {playing ? <PauseIcon id='pause-icon' onClick = {() => handleSetPlaying()} /> : <PlayArrowIcon id='play-arrow-icon' onClick = {() => handleSetPlaying()} />}\r\n        </Box>\r\n        <Slider id='remix-playing-time' aria-label=\"Play time\" defaultValue={0} valueLabelDisplay=\"auto\" style={{ color: '#1DB954' }}/>\r\n        <Typography id='remix-playing-time'>2min 02 secs</Typography>\r\n      <Box\r\n        id='remix-creator'\r\n      >\r\n        {favorite ? <FavoriteIcon id='favorite-icon' onClick = {() => handleSetFavorite()} /> : <FavoriteBorderIcon id='favorite-border-icon' onClick = {() => handleSetFavorite()} />}\r\n        <img\r\n          style={{ borderRadius: '20px', height: '20px', width: '20px'}}\r\n          src={Ctrl}\r\n          alt='User profile of remix creator'\r\n          id='remix-creator-icon'\r\n        />\r\n        <Typography id='remix-playing-creator'>ernest</Typography>\r\n      </Box>\r\n      </Box>\r\n    </Box>\r\n\r\n\r\n\r\n        <Box\r\n          id='sliders'\r\n        >\r\n          <Box\r\n            className='slider'\r\n          >\r\n            <Box\r\n              display='flex'\r\n              flexDirection='column'\r\n              p={2}\r\n            >\r\n              <FontAwesomeIcon icon={faMicrophoneLines} className='icon'/>\r\n              <Typography id='slider-text'>Vocals</Typography>\r\n            </Box>\r\n            <input type=\"range\" id=\"vocal-volume\" min=\"0\" max=\"1\" defaultValue=\"0.5\" step=\"0.01\"/>\r\n          </Box>\r\n\r\n          <Box\r\n            className='slider'\r\n          >\r\n            <Box\r\n              display='flex'\r\n              flexDirection='column'\r\n              p={2}\r\n            >\r\n              <FontAwesomeIcon icon={faDrum} className='icon'/>\r\n              <Typography id='slider-text'>Drums</Typography>\r\n            </Box>\r\n            <input type=\"range\" id=\"drums-volume\" min=\"0\" max=\"1\" defaultValue=\"0.5\" step=\"0.01\"/>\r\n          </Box>  \r\n          \r\n          <Box\r\n            className='slider'\r\n          >\r\n            <Box\r\n              display='flex'\r\n              flexDirection='column'\r\n              p={2}\r\n            >\r\n              <FontAwesomeIcon icon={faGuitar} className='icon'/>\r\n              <Typography id='slider-text'>Bass</Typography>\r\n            </Box>\r\n            <input type=\"range\" id=\"bass-volume\" min=\"0\" max=\"1\" defaultValue=\"0.5\" step=\"0.01\"/>\r\n          </Box>\r\n          \r\n          <Box\r\n            className='slider'\r\n          >\r\n            <Box\r\n              display='flex'\r\n              flexDirection='column'\r\n              p={2}\r\n            >\r\n              <FontAwesomeIcon icon={faMusic} className='icon'/>\r\n              <Typography id='slider-text'>Other</Typography>\r\n            </Box>\r\n            <input type=\"range\" id=\"other-volume\" min=\"0\" max=\"1\" defaultValue=\"0.5\" step=\"0.01\"/>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default StemRemix;\r\n","C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\library\\library.tsx",[],"C:\\Users\\Ernest Lian\\Desktop\\Side Projects\\synthesize\\client\\src\\user_interface\\library\\remixComponent.tsx",[],{"ruleId":"45","severity":1,"message":"46","line":17,"column":10,"nodeType":"47","messageId":"48","endLine":17,"endColumn":16},{"ruleId":"45","severity":1,"message":"49","line":17,"column":18,"nodeType":"47","messageId":"48","endLine":17,"endColumn":27},{"ruleId":"45","severity":1,"message":"50","line":1,"column":18,"nodeType":"47","messageId":"48","endLine":1,"endColumn":24},{"ruleId":"45","severity":1,"message":"51","line":1,"column":36,"nodeType":"47","messageId":"48","endLine":1,"endColumn":47},{"ruleId":"45","severity":1,"message":"52","line":5,"column":3,"nodeType":"47","messageId":"48","endLine":5,"endColumn":9},"@typescript-eslint/no-unused-vars","'volume' is assigned a value but never used.","Identifier","unusedVar","'setVolume' is assigned a value but never used.","'useRef' is defined but never used.","'ChangeEvent' is defined but never used.","'Button' is defined but never used."]